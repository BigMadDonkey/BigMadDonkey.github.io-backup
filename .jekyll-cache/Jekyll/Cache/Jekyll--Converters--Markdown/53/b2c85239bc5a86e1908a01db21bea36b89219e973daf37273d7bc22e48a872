I"&d<p>这是在学校上计算机网络课的个人笔记。博客中的图片部分正常的话都会在正确加载的图片下方多出来一个加载失败的图片，那是给我在本地编辑时看着方便的，跟上方的是同一张图片，所以忽略就行。</p>

<p><br /></p>

<h3 id="目录">目录</h3>

<ol>
  <li>
    <p><strong><a href="#2020/09/14">2020/09/14</a></strong></p>

    <p><a href="#计算机网络的定义">计算机网络的定义</a></p>

    <p><a href="#交换网络">交换网络</a></p>

    <p><a href="#网络协议">网络协议</a></p>

    <p><a href="#计算机网络结构">计算机网络结构</a></p>
  </li>
  <li>
    <p><strong><a href="#2020/09/16">2020/09/16</a></strong></p>

    <p><a href="#网络核心">网络核心</a></p>

    <p><a href="#多路复用">多路复用</a></p>
  </li>
  <li>
    <p><strong><a href="#2020/09/17">2020/09/17</a></strong></p>

    <p><a href="#计算机网络性能">计算机网络性能</a></p>

    <p><a href="#计算机网络体系结构">计算机网络体系结构</a></p>
  </li>
  <li>
    <p><strong><a href="#2020/09/21">2020/09/21</a></strong></p>

    <p><a href="#网络应用的体系结构">网络应用的体系结构</a></p>

    <p><a href="#应用层协议">应用层协议</a></p>

    <p><a href="#Web应用">Web应用</a></p>

    <p><a href="#Email应用">Email应用</a></p>

    <p><a href="#DNS应用">DNS应用</a></p>

    <p><a href="#P2P应用">P2P应用</a></p>
  </li>
  <li>
    <p><strong><a href="#2020/09/236">2020/09/26</a></strong></p>

    <p><a href="#SOCKET编程">SOCKET编程</a></p>

    <p><a href="#客户端软件设计">客户端软件设计</a></p>
  </li>
</ol>

<p><br /></p>

<h2 id="20200914"><a id="2020/09/14">2020/09/14</a></h2>

<h3 id="计算机网络的定义"><a id="计算机网络的定义">计算机网络的定义</a></h3>

<p>计算机网络是一个<strong>自治</strong>的，<strong>互联</strong>的计算机集合。自治是说，计算机网络中的计算机之间没有主从关系。互联是指，网络中的计算机通过通信链路互联互通。</p>

<center>    <img src="/assets/postResources/image-20200916101732477.png" alt="计算机网络概念图" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.1 计算机网络概念图</div> </center>

<p><img src="../assets/postResources/image-20200916101732477.png" alt="image-20200916101732477" /></p>

<p>在计算机网络中，这些网络中的计算机统称为<strong>主机</strong>/<strong>端系统</strong>，连接主机的称为<strong>通信链路</strong>。</p>

<p>然而，随着网络变的越来越庞大复杂，像图中这样直接使用通信链路将主机相互连接的方法显得越来越不科学。一方面随着接入主机的数目增加，通信链路增长的速度越来越快，距离也越来越长，一方面，主机上留给通信链路的接口也是有限的。不得不使用一种新的方法来起到信息交换的作用。</p>

<h3 id="交换网络"><a id="交换网络">交换网络</a></h3>

<center>    <img src="/assets/postResources/image-20200916103840368.png" alt="交换网络" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.2 交换网络</div> </center>

<p><img src="../assets/postResources/image-20200916103840368.png" alt="image-20200916103840368" /></p>

<p>使用一个由特殊设备构成的称为<strong>交换网络</strong>的网络负责当信息传输的中间站，每个主机又与就近的交换网络中的枢纽连接。这样节省了距离成本，也在保证信息传输效率的同时，不至于增加过多的链路。</p>

<p>其中交换网络的枢纽，称为交换节点，一般是路由器或交换机。</p>

<h3 id="internet">Internet</h3>

<p>什么是Internet？Internet是我们如今天天离不开的东西。每时每刻海量的端系统连接在这个庞大的网络中，相互之间产生信息的交换。</p>

<center>    <img src="/assets/postResources/image-20200916111536194.png" alt="Internet" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.3 Internet</div> </center>

<p><img src="../assets/postResources/image-20200916111536194.png" alt="image-20200916111536194" /></p>

<p>一般家庭，机构（公司，大学等）的Internet服务，都是由当地的区域级ISP（Internet Service Provider）提供。这些区域级ISP不禁相互连接，还通过全球ISP与其他地理区域的ISP互联。从这个角度看，Internet是网络的网络——无数的区域性ISP相互连接，也是一个网络。</p>

<center>    <img src="/assets/postResources/image-20200916141452676.png" alt="Internet结构" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.4 Internet结构</div> </center>

<p><img src="../assets/postResources/image-20200916141452676.png" alt="image-20200916141452676" /></p>

<p>Internet就由这些大量的端系统、通信链路（光纤，卫星，铜线…)和分组交换网络构成。</p>

<p>从网络应用的角度看，Internet是为许多运行于端系统的网络应用提供通信服务的基础设施，为网络应用提供API。诸如Web，即时通讯，网络游戏等典型的网络应用，都在使用Internet的服务。</p>

<h3 id="网络协议"><a id="网络协议">网络协议</a></h3>

<p><strong>协议</strong>(protocol)规定了计算机网络中数据交换的规则。协议之于计算机网络，就好比交通规则之于交通系统，如果不规定清楚，汽车🚗，卡车🚚随便上路，路边随便停车，红绿灯视若无物，交通秩序必将混乱。没有协议，只有网络硬件，远远无法实现Internet的庞大信息交流职能。大家都用各自的规矩，其他人怎么知道如何解读你传输来的信息呢？</p>

<p>一般来说，协议的内容规定通信实体之间交换信息的格式，意义和顺序，以及实体针对收到的信息或发生的事件的处理动作。用比较标准的名词来形容，就是<strong>语法</strong>，<strong>语义</strong>和<strong>时序</strong>，称为协议的基本三要素。语法规定数据和信息的传输格式，语义规定各种控制信息的意义以及对控制信息应当作出的响应，时序规定了交换信息双方的行动顺序。</p>

<p>了解各种具体的协议是学习计算机网络的关键。各种协议的设计也是网络创新的重要表现形式。</p>

<p>要获取关于某个网络协议的最权威的描述，请去RFC（Request For Comments）中寻找。</p>

<h3 id="计算机网络结构"><a id="计算机网络结构">计算机网络结构</a></h3>

<p>计算机网络的构成有：</p>

<ul>
  <li>网络边缘
  顾名思义，位于网络最边缘位置的结点，也就是主机/端系统。网络边缘一般也包括那些运行在端系统上的网络应用。</li>
  <li>接入网络/物理介质
  接入网络是将端系统连接到网络中的有线或无线的通信链路。常用的比如家庭的接入网络，学校/企业的接入网络，以及移动网络。</li>
  <li>网络核心
  由路由器，交换机构成的中继网络。</li>
</ul>

<p>端系统应用常用的模型：</p>

<p>① 客户/服务器（client/server）应用模型：客户发送请求，接收服务器响应。典型的CS模型比如Web应用。</p>

<p>② 对等（Peer-Peer, P2P）应用模型：不依赖或不仅仅依赖于服务器实现数据交换。通信在对等的实体之间发生，典型的P2P模型比如skype。</p>

<h4 id="接入网络的具体划分">接入网络的具体划分</h4>

<h5 id="dsl数字用户线路">DSL：数字用户线路</h5>

<center>    <img src="/assets/postResources/image-20200916120722017.png" alt="DSL" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.5 DSL</div> </center>

<p><img src="../assets/postResources/image-20200916120722017.png" alt="image-20200916120722017" /></p>

<p>DSL利用已有的线路（一般是电话线路）连接中心局的多路复用器（DSLAM），利用多路复用的技术从电话线上的空闲频段分出上行通道和下行通道。一般来说，</p>

<p>0~4kHz留给传统电话，<br />
4k~50kHz分配给上行通道，<br />
50kHz~1MHz分配给下行通道。</p>

<p>由于上行下行的速度不同，称为非对称接入。DSL为每个接入设备分配独享的通道，虽然速度不太高，但至少不会被打扰。</p>

<h5 id="电缆网络">电缆网络</h5>

<center>    <img src="/assets/assets/postResources/image-20200916121853864.png" alt="电缆网络" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.6 电缆网络</div> </center>

<p><img src="../assets/postResources/image-20200916121853864.png" alt="image-20200916121853864" /></p>

<p>电缆网络实际上就是有线电视网络。以前光纤不普及，数字电视受众广泛的时候，大家应该都对电缆网络有印象。与数字机顶盒公用同一条线路，与DSL类似地，采用分频多路复用技术，把不用的频段拿来做网络通道。至于其使用体验之糟糕，想必无须多言了（虽然比拨号上网肯定是强了不少）。共享线路是这样的啊，一到家家户户的用网高峰，保证每个人卡的屁都放不利索。</p>

<p>这种接入方式也称为混合光纤同轴线缆（HFC）。</p>

<h5 id="企业机构接入网络ethernet">企业/机构接入网络：Ethernet</h5>

<center>    <img src="/assets/postResources/image-20200916140355807.png" alt="以太网" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图1.7 以太网</div> </center>

<p><img src="../assets/postResources/image-20200916140355807.png" alt="image-20200916140355807" /></p>

<p>企业或机构一般采用以太网的形式组织内部局域网，再通过交换机接入互联网。以太网是目前应用最广泛的局域网技术。</p>

<h5 id="无线接入网络">无线接入网络</h5>

<p>通过<strong>共享</strong>的无线接入网络连接端系统和路由器。</p>

<p>无线接入常见的有同一建筑物内的WLAN（范围小）和运营商的信号基站（范围广，蜂窝数据）。</p>

<h2 id="20200916"><a id="2020/09/16">2020/09/16</a></h2>

<h3 id="网络核心"><a id="网络核心">网络核心</a></h3>

<p>网络的核心部分，承担着两个职能：<strong>路由</strong>和<strong>转发</strong>。</p>

<p>路由是指确定分组传播过程中的网络范围的过程，转发则是接受分组并向下一个目的端发送分组的过程。</p>

<p>毫无疑问，网络的核心就是<strong>交换网络</strong>！</p>

<h3 id="数据交换">数据交换</h3>

<p>数据交换主要分为三种形式：电路交换、报文交换交换以及分组交换。</p>

<h4 id="电路交换">电路交换</h4>

<p>最典型的电路交换莫过于电话网络了。</p>

<center>    <img src="/assets/postResources/image-20200916143422483.png" alt="电路交换" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.1 电路交换</div> </center>

<p><img src="../assets/postResources/image-20200916143422483.png" alt="image-20200916143422483" /></p>

<p>电路交换又分为三阶段：</p>

<ol>
  <li>建立连接（呼叫）</li>
  <li>通信</li>
  <li>断开连接（挂断）</li>
</ol>

<p>电路交换的一大特点是<strong>独占</strong>。一旦电路建立，就算没有使用，这部分资源也不会被其他用户使用，直到断开连接。</p>

<p>然而，独占却不意味着电路使用时就一直占着线不让其他电路用了。多路复用技术的存在使电路交换不至于看起来像个傻子。</p>

<h3 id="多路复用"><a id="多路复用">多路复用</a></h3>

<p>多路复用是通信技术中的重要概念，简而言之，就是用各种法子，让本来只有的一条线路可以供多个电路同时使用。其思想类似于CPU的流水线处理进程，就是将资源分成多片，分给不同电路使用。这个小资源片是被独占的。</p>

<center>    <img src="/assets/postResources/image-20200916144820371.png" alt="多路复用" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.2 多路复用</div> </center>

<p><img src="../assets/postResources/image-20200916144820371.png" alt="image-20200916144820371" /></p>

<h4 id="频分多路复用fdm">频分多路复用：FDM</h4>

<p>将链路分成多个频段，每个频段是一个资源片。FDM最广为熟知的应用莫过于有线电视信号了，不同的频道就是位于不同频率的。用户分配到某个频段之后，在通信过程中始终独占这一部分频段。</p>

<h4 id="时分多路复用tdm">时分多路复用：TDM</h4>

<p>跟CPU流水线最相似的一个多路复用。TDM将时间划分成一段段等长的时间复用帧（TDM帧），用户在每个TDM帧中占用固定的一部分时隙。这样用户的时隙将周期性出现，就好像能同时使用一样。时分复用的用户在频率上使用相同的频段。</p>

<h4 id="波分多路复用wdm">波分多路复用：WDM</h4>

<p>没什么好说的，就是光的“频分复用”，因为光可以用波长来描述频率。只要两个用户的光在波长上隔离开，就能实现波分复用。</p>

<h4 id="码分多路复用cdm">码分多路复用：CDM</h4>

<p>CDM广泛地应用于无线链路共享。既不分割频率，也不分割时间，CDM为每个用户分配一个m bit的码片序列，其中用+1来表示1，用-1来表示0。大家发送数据时，都用被分配到的码片序列来编码要传输的数据。</p>

<p>编码格式：原始数据 x 码片序列</p>

<p>如果要发送二进制编码1，那就发送原m bit码片序列，如果要发送二进制编码0则发送该序列的反码。</p>

<p>所有用户发送的数据会叠加。</p>

<p>为了让叠加后的数据可以被解读，要求所有的码片序列相互正交。
<span class="kdmath">$\frac {1}{m} S_i \cdot S_j = \begin {cases}1, i = j\\0, i \neq j \end {cases}
\ \ \ \ \ \ \ \ \  
\frac {1}{m} S_i \cdot\overline S_j = \begin {cases}-1, i = j\\0, i \neq j \end {cases}$</span>
设用户的码片序列为$S_i$，要发送的原始数据为$d_i$叠加向量P为
<span class="kdmath">$P = \sum_{i=1}^n d_i \cdot S_i$</span></p>

<p>要解码，只需要用用户序列与编码信号内积（再乘上$\frac{1}{m}$)。
<span class="kdmath">$\frac{1}{m} S_i \cdot P = \begin{cases} 1,S_i \in P\\-1,\overline S_i \in P \\ 0,S_i,\overline S_i \notin P \end{cases}$</span>
如果内积的结果是1，说明发送的是原码片序列，也即原始数据是1；</p>

<p>如果内积的结果是-1，说明发送的是码片序列的反码，也即原始数据是-1（当然，实际上代表的是二进制0）；</p>

<p>如果内积的结果是0，说明其与P中的所有部分都正交，也就是P中并没有用户的码片序列信息。</p>

<center>    <img src="/assets/postResources/image-20200917131633391.png" alt="码分复用" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.3 码分复用</div> </center>

<p><img src="../assets/postResources/image-20200917131633391.png" alt="image-20200917131633391" /></p>

<p>借助码分复用格式，可以允许多个用户同时进行数据交换。</p>

<center>    <img src="/assets/postResources/image-20200917131929290.png" alt="多用户码分复用" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.4 多用户码分复用</div> </center>

<p><img src="../assets/postResources/image-20200917131929290.png" alt="image-20200917131929290" /></p>

<p>如图所示，用户1，2的码片序列相互正交，要发送的信息叠加而成P。以图中为例，假设要接收用户1的数据，只需用$S_1$来解码即可。读者不妨试试用$S_2$解码，看看得到的是不是用户2要发送的原始数据？</p>

<h3 id="报文交换">报文交换</h3>

<p>什么是报文？报文就是要发送的信息<strong>整体</strong>。报文交换的关键在于，必须将要发送的信息，也就是报文，一次性发出去。然后交换机存储收到的报文，再向下继续发送。报文可以是一整个文件。最早的报文交换应用应该是电报了。报文交换看起来有些笨重：如果一份文件很大，直到彻底发送完为止，交换机都不能向下一个目标发起传输。一步一个脚印，虽然很稳重，但是太慢了！</p>

<h3 id="分组交换">分组交换</h3>

<p>将报文拆分成一系列较小的数据包，就是<strong>分组</strong>。当然，不仅要切分，还要将小的数据包再打包格式，以便于发送。目的地接收到分组后，还要将分组重组，才能获得要传输的信息。拆分、重组以及分组数据头都会略微增加额外的开销，但以如今的网络状况看已经可以忽略不计了。</p>

<center>    <img src="/assets/postResources/image-20200917133622741.png" alt="分组交换" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.5 分组交换</div> </center>

<p><img src="../assets/postResources/image-20200917133622741.png" alt="image-20200917133622741" /></p>

<p>一个显著优于报文交换的性质是，分组都是较小的，往往很短时间内就能传输完成。对于大文件的传输，报文交换只能笨重地传完一整个，再由交换机向下传一整个大文件，而分组交换可以在很快地发送文件的一个小部分分组后，继续向其发送分组，同时交换机已经可以将它拿到的分组向下继续传输了。这样，时间被大大地利用起来，可以有许多链路同时传输分组，并行起来了。</p>

<p>分组交换和报文交换都采用<strong>存储-转发</strong>的数据交换方式。将报文/分组存储起来，再转发出去。</p>

<h4 id="统计多路复用statistical-multiplexing">统计多路复用：statistical multiplexing</h4>

<p>分组交换网络也存在多路复用。不过，分组交换的复用不是事先安排好的，而是一种按需的复用。</p>

<center>    <img src="/assets/postResources/image-20200917134814398.png" alt="统计多路复用" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.6 统计多路复用</div> </center>

<p><img src="../assets/postResources/image-20200917134814398.png" alt="image-20200917134814398" /></p>

<p>无论是哪个用户，都是共用一条固定传输速率的链路。不过，大家的分组都要在发送前排好队。如果A用户发送了较多的分组，理所应当地，A用户占用链路的时间更久。也就是说，统计上发送了越多的分组，就具有越高的复用率。这就是为什么这叫做统计多路复用。</p>

<h3 id="分组交换vs报文交换">分组交换VS报文交换</h3>

<p><em>网络术语中的数据大小和带宽速率等中出现的K，M，G分别指$10^3$，$10^6$，$10^9$，而非计算机系统术语中对物理存储占用理解的$2^{10}$，$2^{20}$，$2^{30}$等。</em></p>

<p>为了直观地指出分组交换与报文交换在速度上的优劣，不妨研究一下两种方式在速度上的快慢。</p>

<p>设报文的长度为M = 7.5M bits，分组的长度为L=1500 bits，链路传输速率均为R = 1.5Mbps。</p>

<p>那么每次传输报文的时间是M/R = 5s，每次传输分组的时间为L/R = 0.001s（忽略了分组的数据头），但一个报文会被拆分成多个（在示例中，就是M = 5000 L）分组。</p>

<center>    <img src="/assets/postResources/message%20switching.gif" alt="报文交换的传输" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.7 报文交换的传输</div> </center>

<p><img src="../assets/postResources/message switching.gif" alt="message switching" /></p>

<p>报文交换的形式如图2.7所示。庞大的报文只能臃肿地移动，它先花了5s时间从发送端来到第一个交换机，再花了5s时间转移到下一个交换机，最后又花了5s时间到达目的地。整个报文花了15秒才完成交付。时间不短是一方面，更要命的是，庞大的报文还要求交换机也必须具有足够庞大的存储空间。</p>

<center>    <img src="/assets/postResources/packet%20switching.gif" alt="分组交换的传输" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图2.8 分组交换的传输</div> </center>

<p><img src="../assets/postResources/packet switching.gif" alt="packet switching" /></p>

<p>分组交换的形式如图2.8所示。多个分组快速、频繁地通过，避免了庞大的传输发生在某条线路的同时，其他线路在那里摸🐟划水不干事。而且交换路由不用太大的存储。最后一个分组（No.5000）发送到交换机1号时时，才刚刚经过5s，然后又经过了两次链路传输，花了2ms，最后一个bit也传输完成。5000个分组一共才花了5.002s交付。</p>

<p>无论是从对路由存储大小的要求，还是交付时间的角度来看，分组交换都优于报文交换。</p>

<p>对于分组交换，计算其交付时间T的公式如下：
<span class="kdmath">$T = \frac{M}{R} + (h-1)\frac{L}{R} \\
 = \frac{M}{R} + n\frac{L}{R}$</span>
其中M，R，L的定义已给出。h是跳步数，表示分组在传输过程中经历的链路数，n是路由数。</p>

<p>那么分组交换与电路交换比较一下，又何如呢？</p>

<h3 id="分组交换vs电路交换">分组交换VS电路交换</h3>

<p>稍有常识的人都会看出，<del>如果我们的铁骑继续前进</del>现在的网络数据交换形式绝大部分都是分组交换。那么分组交换到底是好在什么地方呢？分组交换是否就完爆电路交换了呢？</p>

<center>    <img src="/assets/postResources/%E9%93%B6%E8%83%8C%E7%BB%84%E9%95%BF.jpg" alt="炉石传说永不完爆！" />    <br />完爆？&lt;/div&gt; </center>

<p><img src="../assets/postResources/银背组长.jpg" alt="银背组长" /></p>

<p>实际上，采用分组交换而非电路交换的原因，在于网络活动的特性。</p>

<p>采用电路交换的网络，假设其用户在独享线路的使用时间中，只有10%的时间处于网络活动状态。而其独享线路占用了整条线路的10%带宽。假设线路固有1Mbps的带宽，那这100kb/s的线路就被该用户一直占着了。当他网络不活动的时候（也是绝大部分时候），这部分线路就在浪费时间。不仅如此，由于各管各的，不能越界，如果用户猛的很有网络需求，那也只能瞅着其他用户的空闲线路干瞪眼，因为每个人只被分到了100kb/s的速度，不能多。</p>

<blockquote>
  <p><em>注：网络活动并不是指上网啊，浏览网页等活动，而是指发生数据交换的活动。以浏览网页举例，只有加载的过程中存在网络活动。一旦加载完成，除非有新的资源请求，否则不会再进行网络通信，即使你在网页上一直浏览也是一样。</em></p>
</blockquote>

<p>如果采用分组交换的网络，即使用户有35个至多，同时出现10名以上用户使用网络的概率却＜0.0004！（当然，现实生活中可能没有这么美好，毕竟大家使用网络的时段也不是均匀的分布，还有网络高峰期）因此分组交换可以容纳更多的用户，让网络资源得到充分共享。</p>

<p><strong>但是！</strong></p>

<p>与电路交换相比，分组交换也有缺点。分组交换只适用于突发数据传输网络（也就是现在的互联网的通信主要形式），如果网络对稳定性的要求极高极强，比如像网络电视这样的源源不断地发送数据的，那采用分组交换一旦遇到网络高峰期，就会非常难受了。一旦大量的分组传输超出了网络的承载范围，就会发生<a href="#拥塞">拥塞</a>，不仅会造成网络延迟，严重的会导致数据丢失。因此分组交换网络需要借助协议验证数据的完整性，以及控制拥塞。</p>

<h2 id="20200917"><a id="2020/09/17">2020/09/17</a></h2>

<h3 id="计算机网络性能"><a id="计算机网络性能">计算机网络性能</a></h3>

<h3 id="速率">速率</h3>

<p>计算机网络中的<strong>速率</strong>就是数据传输的速率，也叫数据率、比特率，表示单位时间传输bit的数目。速率是衡量网络性能的重要指标。</p>

<p>常用单位有bps，kbps，Mbps，Gbps等。重申一下，计算机网络中速率概念提到的k，M，G都是10的3，6，9次方量级，不是2的10，20，30次方量级！</p>

<p>不过，实际生活中提到的速率实际上指的应该是<strong>额定速率</strong>，或者说标称速率。那是一个理论上可以达到的最高值，实际应用中由于各种干扰，物理因素等一般无法达到额定速率。</p>

<h3 id="带宽">带宽</h3>

<p>在信号处理等领域本来表示的是信号的频带宽度，单位是Hz，在网络术语中表示数字信道所能传输的最大速率，单位自然是与速率相同。</p>

<h3 id="延迟和丢包">延迟和丢包</h3>

<p>分组交换会有延迟和丢包的概念。因为分组交换存在排队的现象，某个路由可能短时间接收到大量的分组，但它的转发速度有限，只好在自己的存储中按照顺序为分组们排好队，排队的过程就产生了延迟。如果分组来的过于频繁，超出了队伍的容量，这样的分组就会被舍弃，这就是丢包。被舍弃的分组可能会被源节点重新发送。丢包率是丢包数/已发分组总数。</p>

<p>延迟又可以分为4类：</p>

<h4 id="结点处理延迟">结点处理延迟</h4>

<p>路由接收到分组后处理操作的耗时。比如差错检测，确定输出链路等。这个延迟通常小于毫秒级。</p>

<h4 id="排队延迟">排队延迟</h4>

<p>确定了输出链路之后，有可能需要在发送之前排队。这部分耗时就是排队延迟。排队延迟取决于拥塞的程度，因此也是最难衡量的。</p>

<p>假设带宽为R bps，分组长度为L bits，对于某台路由，分组的平均到达速率为a 个/s，定义流量强度为$\frac{La}{R}$。</p>

<p>仔细动脑想想，$\frac{R}{L}$不就是每秒能处理的分组个数？流量强度相当于用a除以这个每秒能处理的分组个数，因此如果流量强度&gt;1，路由处理分组的速度就赶不上分组到达的速度，就会越积越多，然后丢包。</p>

<div class="kdmath">$$
\frac{La}{R}=
\begin {cases}
\to0,平均排队延迟小\\ 
\to 1,平均排队延迟很大 \\
>1,平均排队延迟无限大（超出服务能力）
\end {cases}
$$</div>

<h4 id="传输延迟">传输延迟</h4>

<p>传输延迟是<strong>指从第一个发送的bit开始到最后一个bit发送的时间</strong>。对于一个长度为L bits的分组，在传输速率为R bps的线路上，其传输延迟为$\frac{L}{R}$。</p>

<h4 id="传播延迟">传播延迟</h4>

<p>信号在物理介质中传播的耗时。传播延迟取决于物理链路的长度d以及信号传播的速度s（一般是光速！）。
<span class="kdmath">$d_{prop} = \frac{d}{s}$</span>
总延迟就由这四类延迟相加而成。
<span class="kdmath">$d_{nodal} = d_{proc}+d_{queue}+d_{trans}+d_{prop}$</span>
为了便于理解，不妨看看下面的例子——🚗过收费站：</p>

<p>假设🚗的时速为100km/h，这就好比是<strong>信号传播速度</strong>；</p>

<p>🚗要过公路收费站，收费站放行每台车的时间是12s，放行速度就是5台/min，这就好比是<strong>带宽</strong>；</p>

<p>🚗就好比一个个<strong>bit</strong>，车队就好比<strong>分组</strong>；</p>

<p>假设一个车队有10辆车，那么一个车队通过收费站的时间是$\frac{10}{5}$=2min，这就好比是<strong>传输延迟</strong>；</p>

<p>🚗过了收费站之后，在公路上疾驰，一直跑到下一个收费站，用了2h，这就好比是<strong>传播延迟</strong>。</p>

<h3 id="时延带宽积">时延带宽积</h3>

<p>时延带宽积 = 传播延迟 × 带宽。</p>

<center>    <img src="/assets/postResources/image-20200917181745993.png" alt="时延带宽积" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.1 时延带宽积</div> </center>

<p><img src="../assets/postResources/image-20200917181745993.png" alt="image-20200917181745993" /></p>

<p>看图就懂了吧？就好像物理中的流量 = 流速 × 截面积还有电流 = nevs似的，就是一个用来刻画传播过程中容纳数据大小的量。还有一种理解方式，是说bit传播过程中，从发出该比特到该比特抵达目的地为止，已经发出的比特量，所以时延带宽积也叫以比特为单位的链路长度。</p>

<h3 id="吞吐量率">吞吐量/率</h3>

<p>吞吐量是在发送端和接收端之间传输数据的速率。单位自然是b/s。吞吐量又分即时吞吐量和平均吞吐量，分别代表某一瞬间的吞吐量和一段时间内的吞吐量，就好像瞬时速度和平均速度的感觉吧。</p>

<p>一条通信链路的吞吐量，取决于其上各部分带宽最小值。那个具有最小带宽的链路就称为瓶颈链路。真是不由得让人联想起网络流FF算法求最大流的过程啊！</p>

<center>    <img src="/assets/postResources/image-20200917183055692.png" alt="Internet中的吞吐量示例" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.2 Internet中的吞吐量示例</div> </center>

<p><img src="../assets/postResources/image-20200917183055692.png" alt="image-20200917183055692" /></p>

<p>互联网的核心中自然也存在某条共享的瓶颈链路R，不过一般来说，某条$R_s$或$R_c$更有可能称为其连接上的瓶颈链路。</p>

<h3 id="计算机网络体系结构"><a id="计算机网络体系结构">计算机网络体系结构</a></h3>

<p>毫无疑问，计算机网络的结构很复杂。不过这个复杂的系统却很适合使用经典的分层结构，从功能的角度来表示。</p>

<p>分层的模型更易于更新和维护，而且每一层的修改都是独立透明的，不会影响到另一层的操作。</p>

<p>分层的结构也有助于标准化。</p>

<center>    <img src="/assets/postResources/image-20200917190203554.png" alt="分层网络体系结构的基本概念" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.3 分层网络体系结构的基本概念</div> </center>

<p><img src="../assets/postResources/image-20200917190203554.png" alt="image-20200917190203554" /></p>

<p>分层网络体系的基本概念如图所示。</p>

<p>实体表示具有发送和接收信息功能的硬件或软件进程。协议负责控制同一层次的实体之间通信的规则，是“水平的”。</p>

<p>任何一层的实体，使用来自下层的服务，遵循本层的协议，实现本层的功能，向上层提供服务。服务是”垂直的“。</p>

<p>下层协议的实现对上层是透明的。</p>

<p>同一系统的相邻层次之间使用接口进行通信，通过服务访问点（SAP）交互，传递<strong>原语</strong>（一系列基础的且不能被中断的操作，比如请求，确定，拒绝…）</p>

<h3 id="osi参考模型">OSI参考模型</h3>

<p>开放系统互连（OSI）是由国际标准化组织ISO于1984年提供的分层网络体系参考模型。提出该模型的目的是实现<strong>异构</strong>网络系统的互联互通。彼时许多企业开发了各自不同的网络结构，如何使不同的结构共通，成为了问题。</p>

<p>OSI使异构网络互连的标准。然而，OSI如今只具有理论意义，而在实际的市场应用中鲜有发挥。</p>

<p>OSI的结构足足有他妈的7层：</p>

<center>    <img src="/assets/postResources/image-20200918210012519.png" alt="OSI参考模型" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.4 OSI参考模型</div> </center>

<p><img src="../assets/postResources/image-20200918210012519.png" alt="image-20200918210012519" /></p>

<p>OSI的通信过程只对主机有7层架构要求，对于中间的系统，只需要底部的三层。各层有自己的协议。</p>

<center>    <img src="/assets/postResources/image-20200918214249759.png" alt="OSI的通信过程" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.4 OSI的通信过程</div> </center>

<p><img src="../assets/postResources/image-20200918214249759.png" alt="image-20200918214249759" /></p>

<p>数据从源主机的应用层通过接口开始逐层向下，直到物理层，通过物理介质传到中间系统。在中间系统经过一系列处理向上到网络层，中间系统在这一层次明确将数据传输到的下一个目的地，然后再向下到物理层，通过物理介质传输向目的地。到达目的主机后，又逐层向上到目的主机应用层。图中实线的内容也叫实通信过程，表示数据的实际通信。图中的高四层没有中间系统的参与，称为端到端层(end-end)。</p>

<center>    <img src="/assets/postResources/image-20200918215035166.png" alt="OSI的数据封装" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.5 OSI的数据封装</div> </center>

<p><img src="../assets/postResources/image-20200918215035166.png" alt="image-20200918215035166" /></p>

<p>每一对等层之间通过协议规范传输的内容称为协议数据单元（PDU）。从最顶层应用层开始，每层根据协议以及上一层传来的数据，加上本层的头部信息，构成新的PDU，再通过接口传递给下层。注意，到物理层的时候，就不再加额外的头部信息了，直接传递二进制的信号。封装数据的解读顺序与图中类似，只是从底向上。</p>

<p>进行数据封装的操作是为了增加控制信息，其往往包括地址、差错检测编码（用于检错/纠正）、协议控制等。</p>

<p>下面对OSI参考模型的各层进行简要的介绍。</p>

<h3 id="物理层">物理层</h3>

<p>通过物理介质传输二进制编码信号。物理层可能涉及到接口的机械特性、传输的功能特性、具体的规程特性等。物理层一般还涉及编码的表示形式（比如高电平表示1，低电平表示0这种？）、数据率、比特同步（保证发送端与接收端的传输内容同步）和传输模式（一般决定了传输方向）等。</p>

<p>这层意思意思就行了，反正也不会怎么接触。</p>

<h3 id="数据链路层">数据链路层</h3>

<p>数据链路层主要负责由物理链路直接相连的结点之间的数据传输。链路层将网络层传来的PDU加头加尾，构成数据帧。一般来说，头部包含地址等信息，尾部包含差错检测等信息。</p>

<center>    <img src="/assets/postResources/image-20200919124803554.png" alt="数据链路层-寻址" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.6 数据链路层-寻址</div> </center>

<p><img src="../assets/postResources/image-20200919124803554.png" alt="image-20200919124803554" /></p>

<p>数据链路层要解决的一个关键问题就是<strong>物理寻址</strong>。毕竟很多物理链路并非单单从一个指向另一个，而是一对多，乃至多对多。如果不在帧头部标识数据的发送端和接收端的物理地址，谁来接收数据，数据的来源如何，就都无从而知了。</p>

<p>除了物理寻址之外数据链路层还负责流量控制，差错控制和访问控制的功能。</p>

<ul>
  <li>流量控制是防止接收端被大量数据淹没的机制</li>
  <li>差错控制检测损坏和丢失帧，并避免重复帧</li>
  <li>访问控制决定某一时刻哪个设备拥有链路的控制使用权</li>
</ul>

<h3 id="网络层">网络层</h3>

<p>网络层负责从源主机到目的主机数据分组的交付，可能穿越多个网络。</p>

<p>网络层还负责提供逻辑地址。逻辑地址是全局唯一的，可以确保只有目的主机可以接收，比如IP地址。</p>

<p>网络层也负责路由，根据分组的内容决定路由的方向，<strong>分组</strong>转发的路径。</p>

<h3 id="传输层">传输层</h3>

<p>传输层的PDU称为段（segment）。传输层负责源主机到目的主机、进程到进程的报文传输。</p>

<center>    <img src="/assets/postResources/image-20200919143126392.png" alt="传输层" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.7 传输层</div> </center>

<p><img src="../assets/postResources/image-20200919143126392.png" alt="image-20200919143126392" /></p>

<p>如图所示，传输层实现的是报文的分段与重组功能。将报文分成分组并加上头部信息，交给网络层传输，再接收端又将他们聚成报文。除此之外，传输层还要负责添加SAP寻址的信息，确保进程找到对应的端口号。有的传输层协议还会解决连接控制、流量控制和差错控制的问题。</p>

<h3 id="会话层">会话层</h3>

<center>    <img src="/assets/postResources/image-20200919154609572.png" alt="会话层" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.8 会话层</div> </center>

<p><img src="../assets/postResources/image-20200919154609572.png" alt="image-20200919154609572" /></p>

<p>会话层负责会话控制，并将表示层的PDU插入一些同步控制信息，如果传输过程中某个控制点附近出现意外，只需要恢复该点附近的数据。</p>

<h3 id="表示层">表示层</h3>

<center>    <img src="/assets/postResources/image-20200920211843179.png" alt="表示层" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.9 表示层</div> </center>

<p><img src="../assets/postResources/image-20200920211843179.png" alt="image-20200920211843179" /></p>

<p>表示层负责处理两个系统间信息交换的语法和语义，将数据转换为主机独立的编码，以及对数据的加密解密、压缩解压缩等。</p>

<h3 id="应用层">应用层</h3>

<center>    <img src="/assets/postResources/image-20200921210331037.png" alt="应用层" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.10 应用层</div> </center>

<p><img src="../assets/postResources/image-20200921210331037.png" alt="image-20200921210331037" /></p>

<p>支持用户通过代理或者网络接口使用网络服务。典型的网络服务有文件传输、电子邮件、Web服务等。</p>

<h3 id="tcpip参考模型">TCP/IP参考模型</h3>

<center>    <img src="/assets/postResources/image-20200921210432992.png" alt="TCP/IP参考模型" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图3.11 TCP/IP参考模型</div> </center>

<p><img src="../assets/postResources/image-20200921210432992.png" alt="image-20200921210432992" /></p>

<p>TCP/IP的参考模型如图所示。可以看到其只有四层，而且除了网际层，每一层都有多种选择。</p>

<p>对于网际接口层，并没有要求特定的协议，只要能封装IP分组就可以。</p>

<p>TCP/IP模型的一大特点就是一切网络应用程序都构建于IP之上，IP又可应用到各式各样的网络上。</p>

<h3 id="5层参考模型">5层参考模型</h3>

<p>5层参考模型综合了OSI 7层模型和TCP/IP 模型的优点，可以说其不仅在理论上具有意义，现在在网络中也具有相当的实践意义。</p>

<ul>
  <li>
    <p>应用层</p>

    <p>支持各种网络应用，如FTP、HTTP等协议的应用</p>
  </li>
  <li>
    <p>传输层</p>

    <p>实现进程间的信息传输，如TCP、UDP</p>
  </li>
  <li>
    <p>网络层</p>

    <p>实现源主机到目的主机的数据分组的路由、转发，如IP协议，路由协议等</p>
  </li>
  <li>
    <p>链路层</p>

    <p>相邻网络元素（主机，路由器、交换机等）的数据传输，如以太网，WiFi，PPP</p>
  </li>
  <li>
    <p>物理层</p>

    <p>比特级传输</p>
  </li>
</ul>

<h2 id="20200921"><a id="2020/09/21">2020/09/21</a></h2>

<h3 id="网络应用的体系结构"><a id="网络应用的体系机构">网络应用的体系结构</a></h3>

<h3 id="cs结构">C/S结构</h3>

<center>    <img src="/assets/postResources/image-20200921221301737.png" alt="C/S结构示例：Web应用" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.1 C/S结构示例：Web应用</div> </center>

<p><img src="../assets/postResources/image-20200921221301737.png" alt="image-20200921221301737" /></p>

<p>客户机/服务器结构将主机划分成客户端和服务器两类。从功能上划分，客户机是请求服务的主机，服务器是提供服务的主机。</p>

<p>服务器作为提供服务方，一般要保持全天24小时工作，并提供永久性访问的地址/域名。可以通过增加服务器数量来实现可扩展性（并发处理请求）</p>

<p>客户机与服务器通信，使用服务器提供的服务，间歇性接入网络，并且可能具有动态的IP地址，也不可以和其他客户机直接通信。</p>

<p>如图是一个C/S结构示例。不同主机上的客户机通过浏览器向服务器发送请求，服务器又响应请求提供服务。</p>

<h3 id="p2p结构">P2P结构</h3>

<center>    <img src="/assets/postResources/_19415.png" alt="P2P结构" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.2 P2P结构</div> </center>

<p><img src="../assets/postResources/_19415.png" alt="img" /></p>

<p>P2P结构的一大特点是<strong>没有永远在线的服务器</strong>，而且<strong>任意端系统之间可以直接相互通讯</strong>。同样地，节点可以任意时刻接入网络，也可能改变IP地址。P2P是高度可伸缩的，但是难于管理。</p>

<h3 id="混合结构">混合结构</h3>

<p>混合结构结合了C/S结构和P2P结构。一个典型的混合结构应用是Napster。</p>

<center>    <img src="/assets/postResources/image-20200922214007392.png" alt="Napster的混合结构" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.3 Napster的混合结构</div> </center>

<p><img src="../assets/postResources/image-20200922214007392.png" alt="image-20200922214007392" /></p>

<p>文件的传输是P2P式的，但文件的搜索是C/S式的。每个文件都在中央服务器上存有记录，方便每个用户查询。查询到了需要的文件后，可以从文件的提供者那里之间获取。</p>

<h3 id="进程间通信">进程间通信</h3>

<p>同一台主机上的进程间可以通过操作系统提供的机制相互通信，而不同主机的进程间通信都是利用消息交换。发起通信的进程称为客户机进程，等待通信请求的进程称为服务机进程。</p>

<h3 id="套接字">套接字</h3>

<center>    <img src="/assets/postResources/image-20200922215258407.png" alt="socket" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.4 socket</div> </center>

<p><img src="../assets/postResources/image-20200922215258407.png" alt="image-20200922215258407" /></p>

<p>进程间的通信借助于套接字（socket）。使用socket通信可以类比使用信箱送信的过程。发送方将消息放到信箱里，依赖于外部的传输基础设施将消息送到接收方的门外（主机）。接受方从门外获取信息。“信箱”——socket也就是由“传输基础设施”——传输层提供的API。可以用socket选择传输层的协议并进行一些参数的控制。</p>

<h3 id="进程寻址">进程寻址</h3>

<p>要为主机寻址，通过某个标识符确定唯一的主机，可以通过IP地址，那么对于一台主机上的进程呢？</p>

<p>实际上，由于一台主机上同时会有多个进程需要通信，要确定具体寻址哪一台主机，还需要<strong>端口号</strong>。主机上某一个需要通信的进程都会被分配一个端口号。有一些端口号是固定的，不允许随便使用，比如HTTP的专用80端口和Mail的25端口。</p>

<h3 id="应用层协议"><a id="应用层协议">应用层协议</a></h3>

<p>应用层协议是网络应用需要遵循的协议，有许多种。有公开的协议（一般由RFC定义）比如HTTP，FTP，SMTP等。也有私有的协议，比如一些P2P应用的协议。公开的协议的存在方便了大家的应用之间进行互操作。</p>

<p>应用层协议的一般内容：</p>

<ul>
  <li>规定消息的类型（请求，响应…)</li>
  <li>消息的语法（消息中都有哪些字段，字段的格式）</li>
  <li>消息的语义（字段的含义是什么）</li>
  <li>规则（进程如何，何时发送请求/响应？）</li>
</ul>

<h3 id="网络应用对传输服务的需求">网络应用对传输服务的需求</h3>

<ul>
  <li>
    <p>数据丢失/可靠性</p>

    <p>有些应用对数据的完整性有一定容忍，比如网络电话、在线视频等，缺少一部分数据不会对整个应用的运行造成过大影响</p>

    <p>但有些应用又要求数据必须完整100%传输，比如文件传输</p>
  </li>
  <li>
    <p>时间延迟</p>

    <p>有的应用只有时延低时才能正常工作，比如网络电话，网络游戏</p>
  </li>
  <li>
    <p>带宽</p>

    <p>有些应用在带宽达到一定要求时才能有较好体验，比如在线视频</p>

    <p>而像文件传输这样的应用并没有对带宽有固定要求，只要有速度就可以</p>
  </li>
  <li>
    <p>安全性</p>

    <p>像网上银行类应用必须对数据的安全有极高保障</p>
  </li>
</ul>

<h3 id="internet提供的传输服务">Internet提供的传输服务</h3>

<h4 id="tcp">TCP</h4>

<ul>
  <li>面向连接：客户机和服务机进程间需要建立连接</li>
  <li>可靠的传输：把底层的不可靠数据转化成可靠的</li>
  <li>流量控制：控制发送方不要过快发送，超过服务机进程的处理请求</li>
  <li>拥塞控制：当网络负担过重时，限制发送方的发送速度</li>
  <li>不提供延迟保障</li>
  <li>不提供最小带宽保障</li>
</ul>

<h4 id="udp">UDP</h4>

<p>较TCP更简单。</p>

<ul>
  <li>无连接</li>
  <li>数据传输不可靠</li>
  <li>无流量控制、拥塞控制、延迟保障、最小带宽保障</li>
</ul>

<p>UDP为什么什么都不做？因为它提供的服务非常基本非常低级，几乎是传输层协议的必备。虽然什么都没有，但是给予了应用极大的权力自由。</p>

<center>    <img src="/assets/postResources/image-20200923100937077.png" alt="一些应用的应用层和传输层协议" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.5 一些应用的应用层和传输层协议</div> </center>

<p><img src="../assets/postResources/image-20200923100937077.png" alt="image-20200923100937077" /></p>

<h3 id="web应用"><a id="Web应用">Web应用</a></h3>

<p>Web 即 World Wide Web，全球广域网，也称万维网。由伟大的Tim Berners-Lee发明。虽然Web的历史实际上也并没有很久，但其巨大的影响力，甚至使得Internet从当时的众多网络中脱颖而出，称为如今网络的代名词。</p>

<p>Web的最基本构成要素是<strong>网页</strong>（Web Pages）。另外，网页与网页之间相互链接，形成庞大的网络。网页包含多个<strong>对象</strong>（objects），对象可以是HTML文件、图像、视频、脚本等。</p>

<p>每个网页还必须有一个基本的HTML文件，包含对其他对象的链接。</p>

<p>要对网页对象进行寻址，使用的是<strong>统一资源定位器（URL）</strong>，关于URL的介绍，详见<a href="https://tools.ietf.org/html/rfc1738">RFC 1738</a>。</p>

<p>URL有一个基本的格式</p>

<p>Scheme://host:port/path</p>

<p><em>（有时候省略了Scheme，那就说明默认为HTTP）</em></p>

<h3 id="http协议">HTTP协议</h3>

<p>HTTP是HyperText Transfer Protocol的简称。HTTP采用了C/S架构，客户机就是浏览器，负责请求、接收、展示对象。服务器负责响应请求。</p>

<p>HTTP采用的传输层协议是TCP协议。</p>

<ul>
  <li>服务器在80端口等待客户机请求。</li>
  <li>浏览器发起对服务器的TCP连接，创建套接字Socket。</li>
  <li>服务器接收来自浏览器的TCP连接。</li>
  <li>浏览器（客户端）与服务器交换HTTP信息。</li>
  <li>关闭TCP连接。</li>
</ul>

<p>HTTP是<strong>无状态</strong>的。所谓无状态，也就是服务器不维护任何有关浏览器过去所发送的请求的信息。这是因为有状态的协议比较复杂。现代网络的应用往往通过其他方式实现维护状态的功能。</p>

<h4 id="http连接">HTTP连接</h4>

<p>HTTP1.0（早期版本）使用非持久性连接，且每个TCP连接仅允许传输一个对象。</p>

<p>HTTP1.1默认使用持久性连接，且每个TCP连接允许传输多个对象。</p>

<p><strong>RTT</strong>（Round Trip Time）表示从客户端发送一个<strong>很小</strong>的数据包到服务器并返回所需的时间。</p>

<center>    <img src="/assets/postResources/image-20200923211848168.png" alt="响应时间" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.6 响应时间</div> </center>

<p><img src="../assets/postResources/image-20200923211848168.png" alt="image-20200923211848168" /></p>

<p>一次请求Web资源的响应时间为</p>

<ol>
  <li>发起、建立TCP连接：1RTT</li>
  <li>发送HTTP请求信息到HTTP相应信息的前几个字节到达客户端：1RTT</li>
  <li>响应消息中所含的文件/对象传输时间</li>
</ol>

<p>因此Total = 2RTT + 文件传输时间。</p>

<p>如果采用非持久性连接，每个对象都需要两个RTT且会建立很多的TCP连接，这会占用其操作系统的资源。因此，后来改用持久性连接，完成一次连接后服务器保持连接的打开，后续的HTTP消息可以通过这个持久的连接发送。</p>

<p>持久性连接又可细分为2种：其一是无流水的持久连接，客户端只有收到前一个响应后才能发送请求，每个对象占用1RTT，对象的请求之间是同步的（synchronized）。其二是采用流水机制的持久连接，也是HTTP1.1的默认方式，当遇到一个对象资源的引用就尽可能快地发出请求，也就是不等上一个响应来，就发送下一个请求，最理想条件下多个对象资源只需要一个RTT。</p>

<h4 id="http方法">HTTP方法</h4>

<p>下面给出一些基本的HTTP方法。</p>

<ul>
  <li>
    <p>GET</p>

    <p>（HTTP1.0）请求指定的对象资源。</p>
  </li>
  <li>
    <p>POST</p>

    <p>（HTTP1.0）提交表单或上传文件。</p>
  </li>
  <li>
    <p>HEAD</p>

    <p>（HTTP1.0）与GET请求类似，不过特地要求服务器<strong>不要</strong>返回请求的内容，也就是只返回头部的信息。</p>
  </li>
  <li>
    <p>PUT</p>

    <p>（HTTP1.1）把消息体中的文件上传到URL指定的路径。</p>
  </li>
  <li>
    <p>DELETE</p>

    <p>（HTTP1.1）请求服务器删除指定URL的内容。</p>
  </li>
  <li>
    <p>CONNECT</p>

    <p>（HTTP1.1）建立一个到目标服务器的连接，将连接方式改成管道方式。</p>
  </li>
  <li>
    <p>OPTIONS</p>

    <p>（HTTP1.1）允许客户端查看性能。</p>
  </li>
  <li>
    <p>TRACE</p>

    <p>（HTTP1.1）回显服务器收到的请求。</p>
  </li>
</ul>

<h4 id="http消息类型">HTTP消息类型</h4>

<p>HTTP消息分为请求消息和响应消息。消息是ASCII码描述的，人直接可读。</p>

<h4 id="请求消息">请求消息</h4>

<center>    <img src="/assets/postResources/image-20200923214414386.png" alt="请求消息示例" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.7 请求消息示例</div> </center>

<p><img src="../assets/postResources/image-20200923214414386.png" alt="image-20200923214414386" /></p>

<p>第一行称为请求行（request line），有方法名、URL、协议版本。</p>

<p>下面的几行称为头部行（可扩展，不限于示例中的几种），由字段:值组成，可以有主机域名、浏览器及版本、连接类型和语言等信息。服务器可能根据语言类型的不同，浏览器的不同，返回不同的对象资源。</p>

<p>然后是一个空行表示消息结束。</p>

<center>    <img src="/assets/postResources/image-20200923215100357.png" alt="请求消息通用格式" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.8 请求消息通用格式</div> </center>

<p><img src="../assets/postResources/image-20200923215100357.png" alt="image-20200923215100357" /></p>

<h4 id="上传输入的方法">上传输入的方法</h4>

<ul>
  <li>
    <p>POST方法</p>

    <p>对于那些需要上传表单（form）的网页，在请求消息的消息体里上传客户端的输入即可。</p>
  </li>
  <li>
    <p>URL方法</p>

    <p>如果输入信息非常少，可以使用get方法，把输入信息放到请求行的URL的位置。使用这种方法可以为简单的方法传入参数，具体应用中体现在URL中的“?”之后的内容。</p>
  </li>
</ul>

<h4 id="响应消息">响应消息</h4>

<center>    <img src="/assets/postResources/image-20200923222924073.png" alt="响应消息通用格式" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.9 响应消息通用格式</div> </center>

<p><img src="../assets/postResources/image-20200923222924073.png" alt="image-20200923222924073" /></p>

<p>第一行称为状态行，包含协议版本，返回状态代码以及他的解释。</p>

<p>下面几行为头部行，具体类似于请求消息的头部行，比如Date:生成响应消息的时间、Server:服务器的应用和版本等。</p>

<p>然后是一个空行，再然后是请求的内容。</p>

<p>常见的HTTP响应状态代码：</p>

<ul>
  <li>101：切换协议。</li>
  <li>200：请求成功。</li>
  <li>301：资源已被永久移动到其他URL。</li>
  <li>302：资源被暂时移动（Found）。</li>
  <li>400：因请求的语法错误而无法正常读取（Bad Request）。</li>
  <li>404：请求的资源不存在。</li>
  <li>500：服务器内部错误。</li>
</ul>

<h3 id="cookie">Cookie</h3>

<p>HTTP是无状态的，可是很多时候，使用网络服务需要记录客户端的状态。Cookie就解决了这一问题。</p>

<p>Cookie是某些网站为了辨别用户身份、进行session追踪而储存在本地上的数据（一般经过加密），详见<a href="https://tools.ietf.org/html/rfc6265">RFC 6265</a>。</p>

<p>要在HTTP中应用Cookie，可以在请求/响应消息中使用Cookie的头部行。浏览器保存自己的Cookie，服务器存储一个Cookie的数据库。</p>

<p>Cookie被大量应用于身份认证中。</p>

<h3 id="web缓存代理服务器">Web缓存/代理服务器</h3>

<p>Web缓存是一种允许在不访问服务器的前提下满足客户端的HTTP需求的技术。</p>

<p>Web缓存可以用来缩短请求响应时间，减少机构的访问流量，实现高效率的内容分发<del>当然还有科学上网</del>。</p>

<center>    <img src="/assets/postResources/image-20200923231512407.png" alt="Web缓存-借助代理服务器" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.10 Web缓存-借助代理服务器</div> </center>

<p><img src="../assets/postResources/image-20200923231512407.png" alt="image-20200923231512407" /></p>

<p>在客户和服务器之间架设一个代理/缓存服务器。用户对原始目标服务器的HTTP请求信息不是直接发给了原始服务器，而是发送给了代理服务器。如果客户请求的对象在代理服务器中已经存有，则可以直接由代理服务器发送响应信息，发送对象；如果没有，则代理服务器代替客户向原始服务器发送那个请求。可以说，代理服务器既充当服务器，又充当客户端。可见其的确为原始目标服务器起到了缓解流量的作用。</p>

<p>代理服务器都是由ISP架设的。</p>

<p>代理服务器应用的一个关键在于，如何确认缓存服务器中已经缓存的某个资源与目标服务器上的对应同名资源完全一致？如果目标服务器上发生了更改，缓存服务器上存有的是旧版本，该如何更新？条件性GET方法可以解决这个问题。</p>

<p>代理服务器在HTTP的GET请求消息中声明所持有资源的版本日期。如果缓存服务器检查后发现没有新的修改版本，则响应消息中不含对象，并且返回HTTP 304：Not Modified，如果有新的修改，则返回HTTP 200：OK并在消息中附带新的对象。</p>

<h3 id="email应用"><a id="Email应用">Email应用</a></h3>

<p>Email应用的历史相对悠久，但经久不衰。</p>

<p>Email应用由以下部分构成：</p>

<ul>
  <li>
    <p>邮件客户端</p>

    <p>读、写Email消息，与服务器交互，收、发Email消息。经典的邮件客户端像Outlook、Foxmail等，通过Web实现的邮件客户端也具有邮件客户端功能。</p>
  </li>
  <li>
    <p>邮件服务器</p>

    <p>存储每个用户的邮件（每个用户的邮箱），消息队列（等待发送的邮件）</p>
  </li>
  <li>
    <p>SMTP协议</p>

    <p>也即简单邮件传输协议 详见<a href="https://tools.ietf.org/html/rfc2821">RFC 2821</a>，是邮件服务器之间传递消息使用的协议。在邮件的发送过程中，客户端和服务器都是邮件服务器，只不过一个负责发送一个负责接收。</p>
  </li>
</ul>

<h4 id="smtp协议">SMTP协议</h4>

<p>SMTP选择的传输层协议是TCP，运行在port 25，使用持久性连接，使用“CRLF.CRLF”表示消息结束。传输过程一般分为三个阶段：</p>

<ol>
  <li>握手</li>
  <li>消息传输</li>
  <li>关闭</li>
</ol>

<p>SMTP采用ACII码的命令/响应交互模式。命令为ASCII文本，响应为状态信息和语句。</p>

<p>注意：Email消息中只能包含7位ASCII码。</p>

<center>    <img src="/assets/postResources/image-20200924135440055.png" alt="Email 应用示例" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.11 Email应用示例</div> </center>

<p><img src="../assets/postResources/image-20200924135440055.png" alt="image-20200924135440055" /></p>

<p>发送者通过客户端（1）将邮件消息发给自己的邮件服务器（2），通过邮件服务器的消息队列（3）发送到接收者的邮件服务器（4）并送入他的邮箱（5），接收者通过邮件客户端（6）获取消息。Email应用是<strong>异步</strong>的，发送者和接收者不需要同时在线。</p>

<p>一般来说，（2）和（4）采用的应用层协议都是SMTP，而（6）可以采用多种协议，比如POP（Post Office Protocol）协议和IMAP（Internet Mail Access Protocol）协议等。POP协议较简单，是<strong>无状态</strong>的协议，具体可见<a href="https://tools.ietf.org/html/rfc1939">RFC 1939</a>，基本上可分为认证和下载两个阶段。IMAP协议<a href="https://tools.ietf.org/html/rfc1730">RFC 1730</a>较之POP协议更新，更复杂，功能也更多，比如允许用户使用文件夹组织消息，也因此IMAP是有状态协议，文件夹的名字、状态等都是跨会话保存的。除了POP，IMAP，还可以使用HTTP协议获取邮件，比如网页邮件客户端（163，QQ等）。</p>

<p>###</p>

<center>    <img src="/assets/postResources/image-20200924142031651.png" alt="SMTP交互示例" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.12 SMTP交互示例</div> </center>

<p><img src="../assets/postResources/image-20200924142031651.png" alt="image-20200924142031651" /></p>

<p>注：S表示SMTP中接收消息的服务器，C表示发送消息的服务器。其是发送消息的客户端，不是邮件客户端！</p>

<p>首先S表示自己的身份，C用HELO（HELLO简化）表清自己的身份。接着S表示确认正常（250），C表示有一封来自自己服务器上用户alice的邮件，S表示确认正常；C表示发送到S上用户Bob，S查询后表示确认正常。C给出命令DATA，表示要传输数据了，S提示他输入邮件，并用单独的带有“.”的一行来表示邮件内容结束，然后C开始输入邮件内容。输入完成后，S表示邮件接收完成，C要求退出，S确认关闭。</p>

<p>与HTTP相比，HTTP像是一种pull式的，尝试拉取内容的协议，而SMTP像是一种push式的，尝试主动上传的协议。它们都使用命令/响应的交互格式，命令、状态代码都是ASCII码表示，不过HTTP的每个对象都封装在独立的响应消息中，而SMTP的多个对象分成多个部分消息发送。</p>

<h3 id="email消息格式">Email消息格式</h3>

<p>Email消息由两部分构成：头部行和消息体。头部行≠SMTP命令，一般有很多行，会包括消息来源、目的地、标题等内容；消息体仅包含消息本身且只能是ASCII字符。详细的见<a href="https://tools.ietf.org/html/rfc822">RFC 822</a>。</p>

<p>为了支持多媒体应用格式，对Email消息格式进行扩展——MIME：多媒体邮件扩展，详见<a href="https://tools.ietf.org/html/rfc2045">RFC 2045</a>、<a href="https://tools.ietf.org/html/rfc2056">RFC 2056</a>。通过在邮件头增加额外的行以声明MIME内容类型。</p>

<h3 id="dns应用"><a id="DNS应用">DNS应用</a></h3>

<h4 id="dns概述">DNS概述</h4>

<p>DNS全称Domain Name System，即域名解析系统。DNS的存在，解决了庞杂的互联网中的主机/路由器识别问题。互联网上的主机可以由IP地址唯一区分，但是一串数字总是难以辨明意义以及记忆的。像我们平时使用的www.google.com、www.sci-hub.tw都是域名，域名一般都是有意义的，方便人记忆。人使用域名，而网络主机使用的是IP，因此需要一个系统将域名与IP对应起来。</p>

<p>DNS就是这样的系统，能将域名解析成具体的IP地址。DNS是一个多层的命名服务器构成的<strong>分布式</strong>数据库，虽然是网络核心的功能，但却是由应用层协议实现的。</p>

<p>DNS除了能将域名翻译成IP地址外，还提供主机别名服务（为一个主机添加其他的域名），邮件服务器别名服务，还能帮助Web服务器调整负载均衡。</p>

<center>    <img src="/assets/postResources/image-20200924232410712.png" alt="分布式层次数据库" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.13 分布式层次数据库</div> </center>

<p><img src="../assets/postResources/image-20200924232410712.png" alt="image-20200924232410712" /></p>

<p>以一次访问www.amazon.com为例：首先到root DNS服务器查询找到com DNS服务器，在com DNS服务器上找到amazon.com DNS服务器，在amazon.com DNS服务器上查找到www.amazon.com的IP地址。</p>

<p>像com、org、cn、uk等域名的解析由顶级域名服务器（TLD）进行，而组织如大学、企业的域名则由对应的权威域名服务器负责解析服务。本地域名服务器是每个ISP都默认有一个的域名解析服务器，并不属于DNS的严格分布式体系，但主机查询DNS时查询先被发送到本地域名服务器，其作为代理再将查询转发给层级式的域名解析服务器系统。</p>

<center style="overflow:auto">    <img src="/assets/postResources/%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2%E5%92%8C%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2.png" alt="递归查询（左）和迭代查询（右）" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.14 递归查询（左）和迭代查询（右）</div> </center>

<p><img src="../assets/postResources/迭代查询和递归查询.png" alt="迭代查询和递归查询" /></p>

<p>对于每一次的域名解析，首先访问本地域名服务器，如果不能解析，就访问根服务器查找。如果根服务器查找不到（也是大部分情况），则返回对应的顶级域名服务器的地址，本地域名服务器再向该顶级域名服务器查询，找到对应的权威域名服务器地址并返回，最后向权威域名服务器查找，获得IP映射后，再返回提交给本地域名服务器。这种方法称为迭代查询。</p>

<p>另一种方法是递归查询。递归查询的任务是将查询的任务交给所联系的服务器，层层委派下去，直到查询到之后再层层返回。为了提高效率，本地域名服务器在获得IP地址后会缓存一段时间再删除。而且本地域名服务器通常会缓存着顶级域名服务器，所以实际上root DNS服务器不经常被访问。</p>

<h3 id="dns记录">DNS记录</h3>

<p>DNS记录简称为RR（Resource records）。RR的格式如下</p>

<p>(name, value, type, ttl)</p>

<p>RR有不同的类型。</p>

<ul>
  <li>
    <p>type=A</p>

    <p>name=主机域名，value=IP地址</p>
  </li>
  <li>
    <p>type=NS</p>

    <p>name=域（不是域名！！），value=该域的权威域名服务器的主机域名</p>
  </li>
  <li>
    <p>type=CNAME</p>

    <p>name=某真实域名的<strong>别名</strong>，value=真实域名</p>
  </li>
  <li>
    <p>type=MX</p>

    <p>value是与name对应的邮件服务器</p>
  </li>
</ul>

<h3 id="dns协议">DNS协议</h3>

<p>DNS协议是查询（query）/回复（reply）式的协议，他们的消息格式相同。</p>

<center>    <img src="/assets/postResources/image-20200925103056341.png" alt="DNS消息格式" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.15 DNS消息格式</div> </center>

<p><img src="../assets/postResources/image-20200925103056341.png" alt="image-20200925103056341" /></p>

<p>消息头部有16位的查询编号、回复消息中也使用相同的编号。除此之外头部还有flags字段，是一些标志位，用来辨别是查询or回复、是否期望递归等等。头部还有查询数目、回答的RR数目、权威RR数目、额外的RR数目等信息。</p>

<p>在下方的消息体中包含了查询问题，其中包含Name，Type等表示一次query的信息。再接着是回复query用的一些RR信息。在下面是一些权威回答和额外信息。</p>

<h3 id="p2p应用"><a id="P2P应用">P2P应用</a></h3>

<p>以文件传输应用为例。假设服务器的上传带宽为$u_s$，节点i的下载带宽和上传带宽分别为$d_i和$$u_i$，共有N个节点需要某个文件，其大小为F bit，网络核心的带宽充足，也就是说只有上述的几种带宽可能限制吞吐量。</p>

<p>在传统的C/S结构中，服务器要串行地发送NF bit，时间为$\frac{NF}{u_s}$，而每个节点的下载带宽有大有小，每个节点下载文件的时间是$\frac{F}{d_i}$，因此分发文件F到N个节点需要的理论最小分发时间是$d_{cs} = max{\frac{NF}{u_s},\mathop{min}\limits_{i}{\frac{F}{d_i} }}$。当N比较大时，节点端的带宽限制没变，但是对服务器的压力增加了，显然此时$\frac{NF}{u_s}$成为显著影响其结果的因素。</p>

<p>在P2P结构的文件传输应用中，服务器只需要发送一个副本，时间为$\frac{F}{u_s}$，每个节点下载文件的时间是$\frac{F}{d_i}$，N个节点总共要下载NF比特，而整个服务器+节点的最快可能上传速率为$u_s + \sum_{i=1}^N{u_i}$，因此理想条件下N个节点都获得F的理论最小分发时间为$d_{P2P} = max{\frac{F}{u_s},\mathop{min}\limits_{i}{\frac{F}{d_i},\frac{NF}{u_s + \sum_{i=1}^N{u_i}} }}$。</p>

<p>随着N的增加，C/S架构的文件传输应用，其时间开销几乎与N成线性增长关系，而P2P架构的时间开销增量很小。</p>

<center>    <img src="/assets/postResources/image-20200926105136866.png" alt="C/S架构和P2P架构的时间开销与节点个数N的关系" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.16 C/S架构和P2P架构的时间开销与节点个数N的关系</div> </center>

<p><img src="../assets/postResources/image-20200926105136866.png" alt="image-20200926105136866" /></p>

<h3 id="bittorrent">BitTorrent</h3>

<p>广受欢迎的P2P文件分发应用。将节点分成大小为256KB的chunk，对于同一个文件，交换其文件chunk的节点组称为torrent，tracker负责跟踪记录参与torrent的节点，用户可以从tracker处获取节点列表。</p>

<center>    <img src="/assets/postResources/image-20200926140344226.png" alt="BitTorrent" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.17 BitTorrent</div> </center>

<p><img src="../assets/postResources/image-20200926140344226.png" alt="image-20200926140344226" /></p>

<p>用户要下载一个文件，就加入其torrent。此时用户还没有chunk，但可以逐渐积累。用户向tracker注册，并获得torrent节点清单，与torrent网络中的“邻居”节点建立连接。下载的同时，节点也要向其他节点上传chunk。节点获得了完整的文件后，可能就会离开，但也可能留下，继续造福其他节点。</p>

<p>文件传输的每个时刻，不同节点都持有chunk的集合。节点会定期检查其邻接节点的chunk列表，并请求缺失的chunk，并优先请求稀缺的chunk。而发送chunk时会优先向对自己节点贡献最大的4个节点发送，可简称为top4，top4每10sec重新评估一次。不仅如此，每30秒还会选择一个其他节点，向它发送chunk。在BitTorrent协议中，上传速率越高，越容易找到可靠的chunk交换对象，就有越好的体验。</p>

<h3 id="p2p应用索引技术">P2P应用：索引技术</h3>

<p>P2P系统的索引是信息到IP地址+端口的映射。</p>

<p>对于文件共享应用（如电驴），节点将自己拥有的文件信息告诉索引，并从索引中搜索从而知道从哪里获取文件。</p>

<p>对于即时消息应用（如QQ），索引将用户ID映射到对应IP地址，用户启动应用时，会向索引告知自己的IP地址，用户向其他用户发送消息时，会通过索引获取其他用户的地址。</p>

<p>索引机制也分为多种实现。</p>

<ul>
  <li>
    <p>集中式索引</p>

    <center>    <img src="/assets/postResources/image-20200926142514072.png" alt="集中式索引" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.18 集中式索引</div> </center>

    <p><img src="../assets/postResources/image-20200926142514072.png" alt="image-20200926142514072" /></p>

    <p>Napster最早采用该种设计。用中央服务器记录索引，每个节点加入时，都向中央服务器通知自己的IP地址和文件内容，要查找文件时，也是向中央服务器查找来源，然后与来源P2P交换文件chunk。虽然集中式索引的内容传输是分布式的，但是内容定位是高度集中的，因此存在单点失效问题和性能瓶颈，而且集中服务器一旦发现了盗版资源，很容易成为版权方针对的目标，这对盗版资源的传播有极大的限制（如今大版权时代，虽然盗版传播听起来不是什么好事，但不得不承认，互联网的盗版资源有存在的价值，并且客观上促进了对版权的保护的发展）。</p>
  </li>
  <li>
    <p>洪泛式查询</p>

    <center>    <img src="/assets/postResources/image-20200926142736443.png" alt="洪泛式查询" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.19 洪泛式查询</div> </center>

    <p><img src="../assets/postResources/image-20200926142736443.png" alt="image-20200926142736443" /></p>

    <p>完全分布式的架构。每个节点都提供索引服务，但只索引自己的文件。每个相互间有TCP连接的活动节点之间构成一条边（虚拟链路），所有的边、活动节点构成一个overlay network（逻辑的）。节点的查询消息通过已有的TCP连接发送，每个收到查询的节点又转发该查询消息给所有与自己有TCP连接的节点，如果查询命中，则将消息发回给查询节点，然后就可以实现文件传输。正如其名，洪泛式查询的查询信息如洪水般泛滥，消耗网络带宽资源。</p>
  </li>
  <li>
    <p>层次式覆盖网络</p>

    <center>    <img src="/assets/postResources/image-20200926144448789.png" alt="层次式覆盖网络" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图4.20 层次式覆盖网络</div> </center>

    <p><img src="../assets/postResources/image-20200926144448789.png" alt="image-20200926144448789" /></p>

    <p>是一种介于集中式和洪泛式之间的方法。每个节点要么自己是一个超级节点，要么会被分配一个超级节点，节点和超级节点之间维持TCP连接，超级节点之间维持TCP连接，超级节点跟踪记录子节点的内容。查询时，每个节点把自己的超级节点当作中央服务器，超级节点之间用洪泛式查询。有点像主机和ISP之间的关系，对吧？层次式覆盖网络的一个最为成功的例子当属于skype了。skype让用户与超级节点连接，超级节点上维护用户名与IP地址之间的映射。</p>
  </li>
</ul>

<h2 id="20200926"><a id="2020/09/26">2020/09/26</a></h2>

<h3 id="网络程序设计接口">网络程序设计接口</h3>

<p>以下的几类设计接口都针对的是端系统上的网络应用，而非路由器上的。</p>

<p>在现有的网络体系要开发网络应用有很多可使用的途径。根据在五层结构中的层次由低到高，主要有诸如以下几类：</p>

<center>    <img src="/assets/postResources/image-20200927203525066.png" alt="网络程序设计接口" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图5.1 网络程序设计接口</div> </center>

<p><img src="../assets/postResources/image-20200927203525066.png" alt="image-20200927203525066" /></p>

<ul>
  <li>直接网卡编程（硬件相关），有较大的开发难度，位于数据链路层。</li>
  <li>基于Packet Driver的编程，屏蔽网卡的实现细节，适用于所有的网卡，面向数据链路层。</li>
  <li>Windows操作系统下基于NDIS（网络驱动接口规范）的网络编程。NDIS是针对windows操作系统网络驱动程序和协议驱动程序的设计框架。</li>
  <li>一些函数库。诸如LibPcap/WinPcap（用于抓包）、Libnet（网络分组构造和发送）、Libndis（图上标注有误。网络入侵检测）、Libicmp（面向icmp协议的报文构造传输）等，可以在开发应用时调用。编写网络入侵检测、防火墙等应用时可以使用这些库。</li>
  <li>NetBIOS编程，相当于OSI参考模型的会话层，是Windows平台使用的。</li>
  <li>Socket，在应用层和传输层之间提供接口。</li>
  <li>Web、RPC、中间件编程。可以视作在应用层之上开发。</li>
</ul>

<h3 id="api">API</h3>

<p>不同主机上的应用进程之间通过应用层协议进行通信，但并非直接交换信息，而是通过与传输层交互来达到信息交换的效果。应用层与传输层之间通过接口进行数据交换，称为应用编程接口（API）。API是应用层和传输层间的数据桥梁。</p>

<h3 id="socket编程"><a id="SOCKET编程">SOCKET编程</a></h3>

<p>SOCKET套接字是应用与传输层的接口<strong>之一</strong>。Berkley UNIX操作系统定义了一种称为SOCKET 的 API，可以在应用进程与传输层之间进行数据交换。</p>

<h3 id="winsock">WINSOCK</h3>

<p>WINSOCK是Berkley Unix SOCKET的拓展。</p>

<p>在WINSOCK应用程序中，先要调用WSAStartup，最后调用WSACleanup。</p>

<h3 id="socket-地址结构">socket 地址结构</h3>

<p>sockaddr_in是一个用来存储地址等信息的结构体。他的前身sockaddr由于未将IP地址和端口号分离开来导致了缺陷，而sockaddr_in则将他们分离开了。</p>

<p>在<code class="language-plaintext highlighter-rouge">#include&lt;netinet/in.h&gt;</code>或<code class="language-plaintext highlighter-rouge">#include&lt;arpa/inet.h&gt;</code>中定义。其中有sin_family（协议族）、sin_port(16位端口号)、sin_addr(结构体 in_addr类型，其中只有一个s_addr，表示32位的IPv4地址)和sin_zero[8]（不使用）</p>

<h3 id="socket-api-函数">SOCKET API 函数</h3>

<ul>
  <li>
    <p>WSAStartup(WORD wVersionRequested, LPWASDATA IpWSAData)</p>

    <p>使用Socket的应用程序在使用Socket之前必须首先调用该函数。第一个参数表示使用的WinSock版本，高位字节表示副版本号，低位字节表示主版本号，例如0x102表示版本2.1。</p>
  </li>
  <li>
    <p>WSACleanup()</p>

    <p>应用程序完成了对socket的使用之后，最后调用WSACleanup，解除与Socket库的绑定，并释放资源。此函数与上一个函数都是Winsock特化的，而剩下要介绍的方法在各种socket API中大同小异。</p>
  </li>
  <li>
    <p>socket(protofamily, type, proto)</p>

    <p>创建一个socket，返回对应的socket描述符。第一个参数表明创建的socket的协议族，第二个表示创建socket的类型，第三个参数表示在该协议族下使用的协议的代号，默认协议为0。</p>

    <center>    <img src="/assets/postResources/image-20201002081156296.png" alt="socket类型（以TCP/IP协议族为例）" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图5.2 socket类型（以TCP/IP协议族为例）</div> </center>

    <p><img src="../assets/postResources/image-20201002081156296.png" alt="image-20201002081156296" />
以TCP/IP协议族为例，该协议族下socket可有三种类型。如果选择的传输层协议为TCP，则对应的socket种类应为SOCK_STREAM；如果选择的传输层协议为UDP，则对应的socket种类应为SOCK_DGRAM；而SOCK_RAW类socket能让应用进程跨过传输层直接与网络层通信，也因此SOCK_RAW的使用权限较高，在Windows系统下需要管理员权限，在Linux系统下需要root权限。</p>
  </li>
  <li>
    <p>close(SOCKET sd)/closesocket(SOCKET sd)</p>

    <p>在Winsock体系中，该函数名为closesocket，在Unix Berkley socket里名为close，其作用为关闭一个描述符为sd的套接字。然而，socket是一种资源，它可能被多个进程共享地使用。套接字数据结构里会存储一个<em>套接字引用计数</em>，每当调用该函数，对应sd的socket其引用计数-1，直到0才会彻底关闭。多个线程使用socket并不会使socket的引用计数增加。该方法返回0表示成功，返回SOCKET_ERROR表示失败。</p>
  </li>
  <li>
    <p>int bind(sd, localaddr, addrlen)</p>

    <p>绑定对应套接字的本地端点地址（对于TCP/IP协议族，也就是IP地址+端口号）。第一个参数是要绑定的socket的描述符，第二个是要绑定的端点地址，是一个sockaddr_in的数据结构，第三个是地址长度。bind函数一般<strong>并不由</strong>客户端显示地调用，因为操作系统会在创建socket时默认提供本地端点地址。</p>

    <center>    <img src="/assets/postResources/image-20201002084658543.png" alt="同一主机不同IP" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图5.3 同一主机不同IP</div> </center>

    <p><img src="../assets/postResources/image-20201002084658543.png" alt="image-20201002084658543" /></p>

    <p>服务器端则很有必要使用该函数绑定特定端口号，以及绑定需要的IP地址（因为服务器很有可能连接多个网络，在多个网络中服务器主机的IP地址不同）。服务器端一般将IP地址赋值为<strong>INADDR_ANY</strong>，其是一个地址通配符，表示主机的任何一个有效地址都可以。</p>
  </li>
  <li>
    <p>int listen(sd,  queuesize)</p>

    <p>使<strong>服务器端</strong>的流式套接字处于监听状态。只能用于服务器端，面向连接的流套接字（比如SOCK_STREAM）。第一个参数表示要操作的socket的描述符，第二个表示设定的连接请求队列大小，请求队列是一个先进先出的数据结构，用于将数据排队送入socket。返回0表示成功，返回SOCKET_ERROR表示失败。</p>
  </li>
  <li>
    <p>connect(sd, saddr, saddrlen)</p>

    <p><strong>客户端</strong>调用该方法使对应sd的socket与特定计算机的特定端口（saddr）的套接字进行连接。可用于TCP客户端，也可用于UDP客户端。在TCP客户端中，效果是建立TCP连接（向服务器端发送连接请求），在UDP客户端中，效果是指定要通信的服务器的端点地址（毕竟UDP是无连接的嘛）。</p>
  </li>
  <li>
    <p>accept(sd, caddr, caddrlen)</p>

    <p><strong>服务器端</strong>调用accpet函数，从指定的处于监听状态的流套接字sd的请求队列中取出一个队列首的请求，并创建一个新的套接字来与客户请求构建连接通道。当然，只用于TCP套接字。该函数返回新socket的描述符。</p>
  </li>
  <li>
    <p>send(sd, *buf, len, flags)/sendto(sd, *buf, len, flags, destaddr, addrlen)</p>

    <p>顾名思义，是发送数据的函数。send并没有指定要发送的端点地址，说明send针对的是客户与服务器端的TCP连接的套接字（以及使用connect函数绑定了目的端点地址的UDP<strong>客户端</strong>套接字）。sendto用于无连接的UDP<strong>服务器端</strong>套接字以及未使用connect函数绑定目的端点地址的UDP<strong>客户端</strong>套接字。</p>
  </li>
  <li>
    <p>recv(sd, /buffer, len, flags)/recvfrom(sd, *buf, len, flags, senderaddr, saddrlen)</p>

    <p>与send/sendto类似。recv用于从TCP连接的另一端接收数据，或是从调用了connect函数的UDP<strong>客户端</strong>套接字接收<strong>服务器端</strong>发来的数据。recvfrom用于从UDP<strong>服务器端</strong>套接字与未调用connect函数绑定目的端点地址的UDP<strong>客户端</strong>socket接收对端的数据。</p>
  </li>
  <li>
    <p>setsockopt(int sd, int level, int optname, *optval, intoptlen),<br />getsockopt(int sd, int level, int optname, *optval, socklen_t *optlen)</p>

    <p>setsockopt设定对应socket的选项参数，getsockopt用来获取任意类型、任意状态socket选项值，并把结果存入optval。</p>
  </li>
</ul>

<h3 id="网络字节顺序">网络字节顺序</h3>

<p>在OSI参考模型中，表示层负责将具有不同数据表示的系统之间的数据表示进行转换。在五层参考模型里没有了表示层，但数据表示转换的事还是得做。</p>

<p>TCP/IP协议头中存储了一个二进制整数来表示网络字节顺序。如果有的参数的本地存储顺序和网络字节顺序不同，就会导致问题。有一些函数可以转换字节顺序：</p>

<ul>
  <li>htons：本地字节顺序→网络字节顺序（16bits）</li>
  <li>ntohs：网络字节顺序→本地字节顺序（16bits）</li>
  <li>htonl：本地字节顺序→网络字节顺序（32bits）</li>
  <li>ntohl：网络字节顺序→本地字节顺序（32bits）</li>
</ul>

<h3 id="socket-api调用基本流程tcpwinsock">socket API调用基本流程（TCP，Winsock）</h3>

<center>    <img src="/assets/postResources/image-20201002112411725.png" alt="socket调用基本流程" />    <br />    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">图5.4 socket调用基本流程</div> </center>

<p><img src="../assets/postResources/image-20201002112411725.png" alt="image-20201002112411725" /></p>

<p>服务器端：</p>

<ol>
  <li>WSAStartup</li>
  <li>s = socket()</li>
  <li>bind(s)</li>
  <li>listen(s)</li>
  <li>ns = accept(s) (有阻塞)</li>
  <li>recv(ns) (有阻塞) (接受请求)</li>
  <li>send(ns) (发送应答)</li>
  <li>closesocket(ns)</li>
  <li>(继续第五步accept，或者)WSACleanup()</li>
</ol>

<p>客户端：</p>

<ol>
  <li>WSAStartup()</li>
  <li>s = socket()</li>
  <li>connect(s) (有阻塞)</li>
  <li>send(s) (发送请求)</li>
  <li>recv(s) (有阻塞) (接收应答)</li>
  <li>closesocket(s)</li>
  <li>WSACleanup()</li>
</ol>

<h3 id="客户端软件设计"><a id="客户端软件设计">客户端软件设计</a></h3>

<h4 id="解析服务器ip地址">解析服务器IP地址</h4>

<p>客户端可能使用域名/10进制点分IP地址，但IP协议需要使用的是32位的二进制IP地址，因此需要转换。函数inet_addr()能实现点分十进制IP地址到32位IP地址的转换，而gethostbyname()可以实现域名到32位IP地址的转换，返回一个指向结构体hostent的指针。</p>

<h4 id="解析服务器熟知端口号">解析服务器（熟知）端口号</h4>

<p>客户端可能使用服务名标识服务器端口，比如HTTP。使用函数getservbyname()返回一个只想结构servent的指针，servent中有服务名、端口号等信息。</p>

<h4 id="解析协议号">解析协议号</h4>

<p>客户常用协议名，可以通过getprotobyname()实现协议名到协议号的转变，同样返回一个指向protoent结构体的指针。</p>

<h3 id="tcp客户端软件流程">TCP客户端软件流程</h3>

<ol>
  <li>确定服务器的IP地址和端口号</li>
  <li>创建套接字</li>
  <li><em>分配本地端点地址(IP地址 + 端口号)</em>（一般由操作系统自动完成）</li>
  <li>连接服务器</li>
  <li>按照应用层协议通信</li>
  <li>关闭/释放连接</li>
</ol>

<h3 id="udp客户端软件流程">UDP客户端软件流程</h3>

<ol>
  <li>确定服务器的IP地址和端口号（这个过程可以在之后的UDP数据报发送过程中多次进行以发送到不同端点地址）</li>
  <li>创建套接字</li>
  <li><em>分配本地端点地址(IP地址 + 端口号)</em>（一般由操作系统自动完成）</li>
  <li>指定服务器端点地址，构造UDP数据报</li>
  <li>按照应用层协议通信</li>
  <li>关闭/释放套接字</li>
</ol>

<h3 id="4种类型基本服务器">4种类型基本服务器</h3>

<h4 id="循环无连接服务器">循环无连接服务器</h4>

<p>基本流程:</p>

<ol>
  <li>创建UDP套接字</li>
  <li>绑定本地端点地址（作为服务器，使用INADDR_ANY + 端口号）</li>
  <li>（反复地）接收客户端的请求</li>
  <li>遵循应用层协议，构造响应报文并发送给客户端</li>
</ol>

<p><em>注意：服务器端不能使用connect()函数！！无连接服务器使用sendto()发送数据报</em></p>

<p>在调用recvfrom()函数接收客户的数据时，还会记录客户的端点地址，以备回复给客户端时使用。</p>

<h4 id="循环面向连接服务器">循环面向连接服务器</h4>

<p>基本流程:</p>

<ol>
  <li>创建TCP主套接字，绑定熟知端口号</li>
  <li>将主套接字设为被动监听模式（listen)</li>
  <li>（反复地）通过主套接字调用accept()接收下一个连接请求。</li>
</ol>

<h4 id="并发无连接服务器">并发无连接服务器</h4>

<h4 id="并发面向连接服务器">并发面向连接服务器</h4>

<p>####</p>

:ET